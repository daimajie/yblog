<?php
/**
 * Created by PhpStorm.
 * User : daimajie
 * Email: daimajie@qq.com
 * Date : 2019/2/27
 * Time : 21:26
 */

namespace app\modules\home\modules\content\controllers;

use app\models\content\Topic;
use app\modules\home\modules\content\models\SearchTopic;
use app\modules\home\modules\content\models\SearchArticle;
use app\modules\home\modules\content\models\TopicForm;
use yii\base\Exception;
use yii\filters\AccessControl;
use app\modules\home\controllers\BaseController;
use app\models\content\Category;
use Yii;
use app\widgets\upload\actions\UploadAction;
use yii\web\NotFoundHttpException;

class WriteController extends BaseController
{
    public $user = null;

    //初始化数据
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->user = Yii::$app->user->identity;
    }

    public function beforeAction($action)
    {
        if(parent::beforeAction($action)){

            $this->view->params['showHeader'] = false;
            return true;
        }
        return false;
    }

    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['index','view'],
                'rules' => [
                    [
                        'actions' => ['index', 'view'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
        ];
    }

    //独立方法
    public function actions()
    {
        return [
            'upload' => [
                'class' => UploadAction::class,
                'subDir' => 'topic',
                'thumb' => [
                    'width' => 390,
                    'height' => 293
                ]
            ],
        ];
    }

    /**
     * 写作中心(话题列表)
     */
    public function actionIndex(){

        $searchModel = new SearchTopic();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, $this->user->id);

        return $this->render('index',[
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'category_items' => Category::dropItems(),
        ]);
    }

    /**
     * 查看话题(文章列表)
     */
    public function actionViewTopic($id){
        $searchModel = new SearchArticle();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, $this->user->id);

        return $this->render('view-topic',[
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'category_items' => Category::dropItems(),
        ]);
    }

    /**
     * 创建话题
     */
    public function actionCreateTopic(){
        $model = new TopicForm();

        if(Yii::$app->request->isPost){
            if($model->load(Yii::$app->request->post()) && $model->store()){
                //创建成功
                return $this->redirect(['index']);
            }
            //话题创建失败
        }

        return $this->render('create-topic',[
            'model' => $model,
            'category_items' => Category::dropItems(),
        ]);
    }

    /**
     * 修改话题
     * @param $id
     */
    public function actionUpdateTopic($id){
        $model = $this->findTopicModel($id);

        if(Yii::$app->request->isPost){
            if($model->load(Yii::$app->request->post()) && $model->modify()){
                //创建成功
                return $this->redirect(['index']);
            }
            //话题创建失败
        }

        return $this->render('create-topic',[
            'model' => $model,
            'category_items' => Category::dropItems(),
        ]);
    }

    /**
     * #删除话题
     * @param $id
     * @return \yii\web\Response
     */
    public function actionDeleteTopic($id){

        try{
            $this->findTopicModel($id)->del();
        }catch (Exception $e){
            Yii::$app->session->setFlash('error',$e->getMessage());
            return $this->redirect(['index']);
        }

        return $this->redirect(['index']);
    }

    /**
     * #获取模型
     * @param $id
     * @return TopicForm|null
     * @throws NotFoundHttpException
     */
    protected function findTopicModel($id)
    {
        if (($model = TopicForm::findOne($id)) !== null) {
            if($model->status != Topic::STATUS_RECYCLE)
                return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

}